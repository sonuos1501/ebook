{
    "pageNumber": 97,
    "pageText": "- Bằng tư duy logic của bản thân, ta cần phân tích, suy luận để xác định nguyên nhân gây lỗi. Ví dụ, nguyên nhân lỗi trong chương trình ở Hình 2 là chưa tính đến trường hợp a = b.\n \n Ngoài ra, khi cần thiết, em có thể bổ sung một số câu lệnh để theo dõi sự thay đổi giá trị của các biến, kết quả thực hiện câu lệnh, cấu trúc điều khiển nào đó, từ đó giúp em xác định vị trí, nguyên nhân gây ra lỗi dễ dàng, nhanh chóng hơn.\n \n Sửa lỗi\n Khi đã xác định được câu lệnh, cấu trúc điều khiển, nguyên nhân gây ra lỗi ta có thể thực hiện chỉnh sửa lỗi.\n \n Ví dụ, để sửa lỗi cú pháp cho chương trình ở Hình 1, ta cần sử dụng kết hợp câu lệnh ask and wait với set to để nhập hai số a, b từ bàn phím (Hình 2); hoặc để sửa lỗi logic ở Hình 2, ta cần chỉnh sửa để chương trình xét cả ba trường hợp có thể xảy ra khi so sánh hai số a, b (Hình 5).\n \n 1. Hình 6 là kết quả kiểm thử chương trình ở Hình 4. Em hãy quan sát Hình 6 và cho biết: \n a) Lỗi được phát hiện khi thực hiện chương trình với những bộ dữ liệu nào? \n b) Câu lệnh nào trực tiếp tạo ra lỗi? Câu lệnh nào liên quan đến lỗi? \n c) Nguyên nhân gây ra lỗi này là gì?\n \n 2. Em hãy lắp các câu lệnh, khối lệnh ở cột bên phải vào vị trí thích hợp trong cấu trúc điều khiển ở cột bên trái để tạo thành chương trình tính đúng nghiệm của phương trình ax + b = 0.\n \n Bảng 1. Ví dụ một phương án chỉnh sửa chương trình ở Hình 4\n \n | Cấu trúc điều khiển | Câu lệnh, khối lệnh |\n |---|---|\n | 1) | a) say Phương trình có vô số nghiệm. |\n | if...then...  | 2)  | \n |  | b)  a = 0 and not b = 0 |\n | else  | 3)  |\n | if...then...  | c) set  x to -1 * b / a |\n |  | 4) | \n |  | c) say Join Nghiệm của phương trình là: x |\n | else | 5) |\n |  | d) a = 0 and b = 0 |\n |  | e) say Phương trình vô nghiệm. |\n\n Hình 5. Đoạn chương trình so sánh, thông báo kết quả so sánh hai số a, b với ba trường hợp a > b, a < b và a = b\n\nax + b = 0 \n"
}