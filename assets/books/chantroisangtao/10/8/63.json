{
    "pageNumber": 63,
    "pageText": "Qua 💡, ta thấy có thể dễ dàng tìm được đường đi ngắn nhất từ A đến 7 bằng cách tính độ dài của tất các đường đi từ A đến 7 (không đi qua đỉnh nào quá một lần) rồi so sánh các độ dài đó. Tuy nhiên, cách này kém hiệu quả và khó thực hiện khi đồ thị có nhiều cạnh.\n\nĐể giải quyết vấn đề đó, người ta đã xây dựng những thuật toán giải bài toán tìm đường đi ngắn nhất trong đồ thị có trọng số một cách hiệu quả. Dưới đây, chúng ta sẽ tìm đường đi ngắn nhất từ A đến T trong đồ thị có trọng số ở 💡 bằng thuật toán Dijkstra (Edsger Dijkstra, 11/5/1930 – 6/8/2002, nhà khoa học máy tính người Hà Lan, đề xuất thuật toán này vào năm 1959).\n\nNguyên lí cơ bản của thuật toán này là: Tìm lần lượt các đỉnh (khác A) gần A nhất, gần A thứ hai, gần A thứ ba, ... (tức là độ dài đường đi ngắn nhất từ A đến lần lượt đến các đỉnh đó bé nhất, bé thứ hai, bé thứ ba, ...) cho đến khi T là một trong các đỉnh đó.\n\nĐể tìm ra các đỉnh này, đầu tiên ta gán cho mỗi đỉnh của đồ thị một số, gọi là nhãn của đỉnh đó (nhãn của đỉnh M được kí hiệu là n_{M}). Tiếp đó, ta thực hiện các bước lặp lần lượt điều chỉnh nhãn (còn gọi là nhãn tạm thời) của từng đỉnh về nhãn cố định đúng bằng độ dài của đường đi ngắn nhất từ đỉnh đó đến đỉnh A.\n\nCụ thể ta thực hiện như sau:\n\nĐầu tiên, gán nhãn cho đỉnh A bằng 0 (n_{A}=0), cho các đỉnh khác đều bằng ∞ (∞ là một số lớn hơn mọi số thực). Khoanh tròn đỉnh A và viết nhãn của mỗi đỉnh khác bên cạnh đỉnh đó (Hình 7). Dưới đây, mỗi lần thay đổi nhãn của đỉnh thì ta gạch nhãn cũ và viết thêm nhãn mới.\n\n**Bước 1. Tìm đỉnh (khác A) gần A nhất.** \nTa chỉ cần tìm trong các đỉnh kề với A, gồm hai đỉnh B và C. Ta tính n_{A} + w_{AB}=0+4=4. Số này nhỏ hơn nhãn hiện tại của B (bằng ∞), nên ta đổi nhãn của B thành n_{B} = 4 (bằng l_{AB}). ④ \nTương tự, tính n_{A} + w_{AC}=0+ 2 = 2 và đổi nhãn của C thành n_{C} = 2 (bằng l_{AC}). Ta thấy đỉnh C có nhãn nhỏ nhất trong các đỉnh khác A nên C là đỉnh gần A nhất. Ta cố định nhãn và khoanh tròn đỉnh C (Hình 8). \n"
}