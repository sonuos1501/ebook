// Autogenerated from Pigeon (v1.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "FLTPigeon.h"
#import <Flutter/Flutter.h>

#import <sys/utsname.h>

@implementation FLTPigeon
+ (void)registerWithRegistrar:(NSObject<FlutterPluginRegistrar> *)registrar {

}
@end

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface Req ()
+ (Req *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface Res ()
+ (Res *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation Req
+ (Req *)fromMap:(NSDictionary *)dict {
  Req *result = [[Req alloc] init];
  result.key = dict[@"key"];
  if ((NSNull *)result.key == [NSNull null]) {
    result.key = nil;
  }
  result.data = dict[@"data"];
  if ((NSNull *)result.data == [NSNull null]) {
    result.data = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.key ? self.key : [NSNull null]), @"key", (self.data ? self.data : [NSNull null]), @"data", nil];
}
@end

@implementation Res
+ (Res *)fromMap:(NSDictionary *)dict {
  Res *result = [[Res alloc] init];
  result.key = dict[@"key"];
  if ((NSNull *)result.key == [NSNull null]) {
    result.key = nil;
  }
  result.data = dict[@"data"];
  if ((NSNull *)result.data == [NSNull null]) {
    result.data = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.key ? self.key : [NSNull null]), @"key", (self.data ? self.data : [NSNull null]), @"data", nil];
}
@end

@interface ReqApiCodecReader : FlutterStandardReader
@end
@implementation ReqApiCodecReader
- (nullable id)readValueOfType:(UInt8)type
{
  switch (type) {
    case 128:
      return [Req fromMap:[self readValue]];

    case 129:
      return [Res fromMap:[self readValue]];

    default:
      return [super readValueOfType:type];

  }
}
@end

@interface ReqApiCodecWriter : FlutterStandardWriter
@end
@implementation ReqApiCodecWriter
- (void)writeValue:(id)value
{
  if ([value isKindOfClass:[Req class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else
  if ([value isKindOfClass:[Res class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else
{
    [super writeValue:value];
  }
}
@end

@interface ReqApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ReqApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ReqApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ReqApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ReqApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    ReqApiCodecReaderWriter *readerWriter = [[ReqApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void ReqApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ReqApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ReqApi.request"
        binaryMessenger:binaryMessenger
        codec:ReqApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestRequest:error:)], @"ReqApi api doesn't respond to @selector(requestRequest:error:)");
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        Req *arg_request = args[0];
        FlutterError *error;
        Res *output = [api requestRequest:arg_request error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
